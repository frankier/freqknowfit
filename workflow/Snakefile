from snakemake.utils import Paramspace
import pandas
from os.path import join as pjoin


def cnf(name, val):
    globals()[name] = config.setdefault(name, val)


# Directories
cnf("VOCABAQDATA_WORK", "vocabaqdata")
cnf("WORK", "work")


MODELS = {
    "glmLogit": "R",
    "glmProbit": "R",
    "glmCloglog": "R",
    "aodBetabinLogit": "R",
    "aodBetabinCloglog": "R",
    "glmmadmb": "R",
    "glmmTmbLogit": "R",
    "glmmTmbProbit": "R",
    "glmmTmbCloglog": "R",
    "vglm": "R",
    "statsmodelsGlmLogit": "py",
    "statsmodelsGlmProbit": "py",
    "statsmodelsGlmCloglog": "py",
}

DATASETS = {
    "blp": "blp.inventory.enriched.parquet",
    "svl12k": "svl12k.enriched.parquet",
    "flp": "flp.inventory.enriched.parquet",
    "spalex": "spalex.inventory.enriched.parquet",
    "elp": "elp.inventory.enriched.parquet",
    "ecp": "ecp.inventory.enriched.parquet",
    }

df = pandas.merge(
    pandas.DataFrame({"model": MODELS.keys()}),
    pandas.DataFrame({"dataset": DATASETS.keys()}),
    how="cross"
)
paramspace = Paramspace(df)


rule all:
    input:
        expand(pjoin(WORK, "{params}.parquet"), params=paramspace.instance_patterns)


rule fit_model:
    input:
        lambda wc: pjoin(VOCABAQDATA_WORK, DATASETS[wc.dataset])
    output:
        pjoin(WORK, f"{paramspace.wildcard_pattern}.parquet")
    params:
        r_script = srcdir("../../freqknowfit/parametric/regress.R")
    run:
        from os import makedirs
        from os.path import dirname
        makedirs(dirname(output[0]), exist_ok=True)

        if MODELS[wildcards.model] == "R":
            prog = "Rscript " + params.r_script
        else:
            prog = "python -m freqknowfit.parametric.regress"

        shell(f"{prog} {wildcards.model} {input} {output}")

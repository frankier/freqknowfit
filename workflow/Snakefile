from snakemake.utils import Paramspace
import pandas
from os.path import join as pjoin


def cnf(name, val):
    globals()[name] = config.setdefault(name, val)


# Directories
cnf("VOCABAQDATA_WORK", "vocabaqdata")
cnf("WORK", "work")


MODELS = {
    "glmLogit": "R",
    "glmProbit": "R",
    "glmCloglog": "R",
    "aodBetabinLogit": "R",
    "aodBetabinCloglog": "R",
    "glmmadmb": "R",
    "glmmTmbLogit": "R",
    "glmmTmbProbit": "R",
    "glmmTmbCloglog": "R",
    "vglm": "R",
    "statsmodelsGlmLogit": "py",
    "statsmodelsGlmProbit": "py",
    "statsmodelsGlmCloglog": "py",
}

DATASETS = [
    "blp",
    "svl12k",
    "flp",
    "spalex",
    "elp",
    "ecp",
]

df = pd.merge(
    pandas.DataFrame(model=MODELS.keys()),
    pandas.DataFrame(dataset=DATASETS),
    how="cross"
)
paramspace = ParamSpace(df)


rule all:
    input:
        expand(pjoin(WORK, "{params}.parquet"), params=paramspace.instance_patterns)


rule fit_model:
    input:
        lambda wc: pjoin(VOCABAQDATA_WORK, wc)
    output:
        pjoin(WORK, f"{paramspace.wildcard_pattern}.parquet")
    run:
        shell(f"mkdir -p " + WORK)
        if MODELS[wildcards.model] == "R":
            prog = "Rscript " + srcdir("../../freqknowfit/parametric/regress.R")
        else:
            prog = "python -m freqknowfit.parametric.regress"

        shell(f"{prog} {wildcards.model} {input} {output}")
